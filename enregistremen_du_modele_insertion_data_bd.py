# -*- coding: utf-8 -*-
"""enregistremen_du_modele_insertion_data_bd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ijXV8qzzBf1JrYPr93CY5LErcw8yqAAV
"""


import sklearn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
import seaborn as sns
import joblib
from sklearn.metrics import accuracy_score, precision_score, recall_score
from sklearn.metrics import auc, roc_curve,confusion_matrix #,plot_confusion_matrix
from sklearn.ensemble import RandomForestClassifier
sns.set_theme(style="darkgrid")

scikit_version = sklearn.__version__
scikit_version


data_finance= pd.read_csv('preprocessed_transaction_data.csv')
data_finance.tail(10)



X = data_finance.drop(['isFraud'], axis = 1)

print(X)

y = data_finance['isFraud']



# data.to_csv('preprocessed_transaction_data.csv', index=False)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 123)

X_train.shape, X_test.shape



# X_train.to_csv('transaction_data.csv', index=False)

y

y_train.shape, y_test.shape

rf_clf = RandomForestClassifier()

randforest_clf= rf_clf.fit(X_train, y_train)

y_pred_rf = randforest_clf.predict(X_test)

pred_result= pd.DataFrame({ 'y_test': y_test,
                           'y_pred': y_pred_rf})
pred_result

print('Random Forest\n')



accuracy = accuracy_score(y_test, y_pred_rf)
precision = precision_score(y_test, y_pred_rf)
recall = recall_score(y_test, y_pred_rf)


print('Accuracy:', accuracy)
print('Precision:', precision)
print('Recall:', recall)

fpr_rf, tpr_rf, _ = roc_curve(y_test, y_pred_rf)

AUC_rf = auc(fpr_rf, tpr_rf)

print('AUC for Random Forest :', AUC_rf)

classifier = RandomForestClassifier()
clf_pipeline = Pipeline(steps=[('classifer', classifier)])
pipeline_model = clf_pipeline.fit(X_train,y_train)

y_pred= pipeline_model.predict(X_test)

pipe_clf_param= {}

pipe_clf_param['pipeline_clf']=pipeline_model
pipe_clf_param['sklearn_version'] = scikit_version
pipe_clf_param['accuracy']= accuracy
pipe_clf_param['precision']= precision
pipe_clf_param['recall']=recall
pipe_clf_param['AUC_rf ']=AUC_rf

"""### Enregistrement du model"""

filename= 'model/pipe_clf.joblib'

joblib.dump(pipe_clf_param, filename)

pipe_clf_checkpoint = joblib.load(filename)
print('test sur le mod√®le charger')

reloaded_pipeline = pipe_clf_checkpoint['pipeline_clf']
reloaded_pipeline

y_pred= reloaded_pipeline.predict(X_test)
print(y_pred)
accuracy_score(y_test, y_pred)

print(pipe_clf_checkpoint['accuracy'])
print('model enregistrer')
#